{"remainingRequest":"/var/www/sharewani/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/sharewani/front-end/src/components/CheckBoxListing.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/sharewani/front-end/src/components/CheckBoxListing.vue","mtime":1570886746912},{"path":"/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    props: {\n        checkBoxListing: {\n            type: Array,\n            default: null,\n        },\n        checkboxName: {\n            type: String,\n            default: 'checkboxes',\n        },\n        parentName: {\n            type: String,\n            default: null,\n        },\n    }, // End of Component > props\n\n    data() {\n        return {\n            selected: [],\n            allSelected: false,\n            indeterminate: false,\n        }\n    },\n    methods: {\n        toggleAll(checked) {\n            this.selected = checked ? this.checkBoxListing.slice() : []\n        },\n    },\n    watch: {\n        selected(newVal) {\n            // Handle changes in individual flavour checkboxes\n            if (newVal.length === 0) {\n                this.indeterminate = false\n                this.allSelected = false\n            } else if (newVal.length === this.checkBoxListing.length) {\n                this.indeterminate = false\n                this.allSelected = true\n            } else {\n                this.indeterminate = true\n                this.allSelected = false\n            }\n        },\n    },\n}\n",{"version":3,"sources":["CheckBoxListing.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CheckBoxListing.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <b-form-group>\n            <template slot=\"label\">\n                <b-form-checkbox\n                    v-model=\"allSelected\"\n                    :indeterminate=\"indeterminate\"\n                    aria-describedby=\"permission\"\n                    aria-controls=\"permission\"\n                    @change=\"toggleAll\"\n                >\n                    <span>{{ parentName }}</span>\n                </b-form-checkbox>\n            </template>\n\n            <b-form-checkbox-group\n                :id=\"checkboxName\"\n                v-model=\"selected\"\n                :options=\"checkBoxListing\"\n                :name=\"checkboxName\"\n                class=\"ml-4\"\n                stacked\n            ></b-form-checkbox-group>\n        </b-form-group>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        checkBoxListing: {\n            type: Array,\n            default: null,\n        },\n        checkboxName: {\n            type: String,\n            default: 'checkboxes',\n        },\n        parentName: {\n            type: String,\n            default: null,\n        },\n    }, // End of Component > props\n\n    data() {\n        return {\n            selected: [],\n            allSelected: false,\n            indeterminate: false,\n        }\n    },\n    methods: {\n        toggleAll(checked) {\n            this.selected = checked ? this.checkBoxListing.slice() : []\n        },\n    },\n    watch: {\n        selected(newVal) {\n            // Handle changes in individual flavour checkboxes\n            if (newVal.length === 0) {\n                this.indeterminate = false\n                this.allSelected = false\n            } else if (newVal.length === this.checkBoxListing.length) {\n                this.indeterminate = false\n                this.allSelected = true\n            } else {\n                this.indeterminate = true\n                this.allSelected = false\n            }\n        },\n    },\n}\n</script>\n"]}]}