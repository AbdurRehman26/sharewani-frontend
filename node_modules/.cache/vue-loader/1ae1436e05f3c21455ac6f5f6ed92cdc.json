{"remainingRequest":"/var/www/sharewani/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/sharewani/front-end/src/components/VideoJSRecord.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/sharewani/front-end/src/components/VideoJSRecord.vue","mtime":1570886746912},{"path":"/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport 'video.js/dist/video-js.css'\nimport 'videojs-record/dist/css/videojs.record.css'\n\nimport 'webrtc-adapter'\nimport RecordRTC from 'recordrtc'\n\nimport videojs from 'video.js'\n// eslint-disable-next-line\nimport Record from 'videojs-record/dist/videojs.record.js'\n\nexport default {\n    data() {\n        return {\n            player: '',\n            options: {\n                controls: true,\n                autoplay: false,\n                fluid: true,\n                loop: false,\n                width: 500,\n                height: 281,\n                debug: true,\n                controlBar: {\n                    volumePanel: true,\n                },\n                plugins: {\n                    // configure videojs-record plugin\n                    record: {\n                        audio: false,\n                        video: true,\n                        debug: true,\n                        maxLength: 10,\n                        videoRecorderType: 'WhammyRecorder',\n                        videoMimeType: 'video/mp4',\n                    },\n                },\n            },\n        }\n    },\n    mounted() {\n        /* eslint-disable no-console */\n        this.player = videojs('#myVideo', this.options, () => {\n            // print version information at startup\n            var msg =\n                'Using video.js ' +\n                videojs.VERSION +\n                ' with videojs-record ' +\n                videojs.getPluginVersion('record') +\n                ' and recordrtc ' +\n                RecordRTC.version\n            videojs.log(msg)\n        })\n\n        this.player.record().getDevice()\n\n        // device is ready\n        this.player.on('deviceReady', () => {\n            console.log('device is ready!')\n        })\n\n        // user clicked the record button and started recording\n        this.player.on('startRecord', () => {\n            this.$emit('recordingStarted')\n            console.log('recordingStarted')\n        })\n\n        this.player.on('stopRecord', () => {\n            this.$emit('recordingStarted')\n            console.log('stop')\n        })\n\n        // user completed recording and stream is available\n        this.player.on('finishRecord', () => {\n            // the blob object contains the recorded data that\n            // can be downloaded by the user, stored on server etc.\n            console.log('finished recording: ', this.player.recordedData)\n            this.player.record().saveAs({ video: 'recorded-video.mp4' })\n            this.$emit('recordingEnded')\n        })\n\n        // error handling\n        this.player.on('error', (element, error) => {\n            console.warn(error)\n        })\n\n        this.player.on('deviceError', () => {\n            console.error('device error:', this.player.deviceErrorCode)\n        })\n    },\n    beforeDestroy() {\n        if (this.player) {\n            this.player.dispose()\n        }\n    },\n}\n",{"version":3,"sources":["VideoJSRecord.vue"],"names":[],"mappings":";;;;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VideoJSRecord.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <video id=\"myVideo\" class=\"video-js vjs-default-skin\" playsinline></video>\n</template>\n\n<script>\nimport 'video.js/dist/video-js.css'\nimport 'videojs-record/dist/css/videojs.record.css'\n\nimport 'webrtc-adapter'\nimport RecordRTC from 'recordrtc'\n\nimport videojs from 'video.js'\n// eslint-disable-next-line\nimport Record from 'videojs-record/dist/videojs.record.js'\n\nexport default {\n    data() {\n        return {\n            player: '',\n            options: {\n                controls: true,\n                autoplay: false,\n                fluid: true,\n                loop: false,\n                width: 500,\n                height: 281,\n                debug: true,\n                controlBar: {\n                    volumePanel: true,\n                },\n                plugins: {\n                    // configure videojs-record plugin\n                    record: {\n                        audio: false,\n                        video: true,\n                        debug: true,\n                        maxLength: 10,\n                        videoRecorderType: 'WhammyRecorder',\n                        videoMimeType: 'video/mp4',\n                    },\n                },\n            },\n        }\n    },\n    mounted() {\n        /* eslint-disable no-console */\n        this.player = videojs('#myVideo', this.options, () => {\n            // print version information at startup\n            var msg =\n                'Using video.js ' +\n                videojs.VERSION +\n                ' with videojs-record ' +\n                videojs.getPluginVersion('record') +\n                ' and recordrtc ' +\n                RecordRTC.version\n            videojs.log(msg)\n        })\n\n        this.player.record().getDevice()\n\n        // device is ready\n        this.player.on('deviceReady', () => {\n            console.log('device is ready!')\n        })\n\n        // user clicked the record button and started recording\n        this.player.on('startRecord', () => {\n            this.$emit('recordingStarted')\n            console.log('recordingStarted')\n        })\n\n        this.player.on('stopRecord', () => {\n            this.$emit('recordingStarted')\n            console.log('stop')\n        })\n\n        // user completed recording and stream is available\n        this.player.on('finishRecord', () => {\n            // the blob object contains the recorded data that\n            // can be downloaded by the user, stored on server etc.\n            console.log('finished recording: ', this.player.recordedData)\n            this.player.record().saveAs({ video: 'recorded-video.mp4' })\n            this.$emit('recordingEnded')\n        })\n\n        // error handling\n        this.player.on('error', (element, error) => {\n            console.warn(error)\n        })\n\n        this.player.on('deviceError', () => {\n            console.error('device error:', this.player.deviceErrorCode)\n        })\n    },\n    beforeDestroy() {\n        if (this.player) {\n            this.player.dispose()\n        }\n    },\n}\n</script>\n"]}]}