{"remainingRequest":"/var/www/sharewani/front-end/node_modules/babel-loader/lib/index.js!/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/sharewani/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/sharewani/front-end/src/components/CheckBoxListing.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/sharewani/front-end/src/components/CheckBoxListing.vue","mtime":1570886746912},{"path":"/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    checkBoxListing: {\n      type: Array,\n      default: null\n    },\n    checkboxName: {\n      type: String,\n      default: 'checkboxes'\n    },\n    parentName: {\n      type: String,\n      default: null\n    }\n  },\n  // End of Component > props\n  data: function data() {\n    return {\n      selected: [],\n      allSelected: false,\n      indeterminate: false\n    };\n  },\n  methods: {\n    toggleAll: function toggleAll(checked) {\n      this.selected = checked ? this.checkBoxListing.slice() : [];\n    }\n  },\n  watch: {\n    selected: function selected(newVal) {\n      // Handle changes in individual flavour checkboxes\n      if (newVal.length === 0) {\n        this.indeterminate = false;\n        this.allSelected = false;\n      } else if (newVal.length === this.checkBoxListing.length) {\n        this.indeterminate = false;\n        this.allSelected = true;\n      } else {\n        this.indeterminate = true;\n        this.allSelected = false;\n      }\n    }\n  }\n};",{"version":3,"sources":["CheckBoxListing.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AATA,GADA;AAcA;AAEA,EAAA,IAhBA,kBAgBA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,WAAA,EAAA,KAFA;AAGA,MAAA,aAAA,EAAA;AAHA,KAAA;AAKA,GAtBA;AAuBA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,OADA,EACA;AACA,WAAA,QAAA,GAAA,OAAA,GAAA,KAAA,eAAA,CAAA,KAAA,EAAA,GAAA,EAAA;AACA;AAHA,GAvBA;AA4BA,EAAA,KAAA,EAAA;AACA,IAAA,QADA,oBACA,MADA,EACA;AACA;AACA,UAAA,MAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,aAAA,aAAA,GAAA,KAAA;AACA,aAAA,WAAA,GAAA,KAAA;AACA,OAHA,MAGA,IAAA,MAAA,CAAA,MAAA,KAAA,KAAA,eAAA,CAAA,MAAA,EAAA;AACA,aAAA,aAAA,GAAA,KAAA;AACA,aAAA,WAAA,GAAA,IAAA;AACA,OAHA,MAGA;AACA,aAAA,aAAA,GAAA,IAAA;AACA,aAAA,WAAA,GAAA,KAAA;AACA;AACA;AAbA;AA5BA,CAAA","sourcesContent":["<template>\n    <div>\n        <b-form-group>\n            <template slot=\"label\">\n                <b-form-checkbox\n                    v-model=\"allSelected\"\n                    :indeterminate=\"indeterminate\"\n                    aria-describedby=\"permission\"\n                    aria-controls=\"permission\"\n                    @change=\"toggleAll\"\n                >\n                    <span>{{ parentName }}</span>\n                </b-form-checkbox>\n            </template>\n\n            <b-form-checkbox-group\n                :id=\"checkboxName\"\n                v-model=\"selected\"\n                :options=\"checkBoxListing\"\n                :name=\"checkboxName\"\n                class=\"ml-4\"\n                stacked\n            ></b-form-checkbox-group>\n        </b-form-group>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        checkBoxListing: {\n            type: Array,\n            default: null,\n        },\n        checkboxName: {\n            type: String,\n            default: 'checkboxes',\n        },\n        parentName: {\n            type: String,\n            default: null,\n        },\n    }, // End of Component > props\n\n    data() {\n        return {\n            selected: [],\n            allSelected: false,\n            indeterminate: false,\n        }\n    },\n    methods: {\n        toggleAll(checked) {\n            this.selected = checked ? this.checkBoxListing.slice() : []\n        },\n    },\n    watch: {\n        selected(newVal) {\n            // Handle changes in individual flavour checkboxes\n            if (newVal.length === 0) {\n                this.indeterminate = false\n                this.allSelected = false\n            } else if (newVal.length === this.checkBoxListing.length) {\n                this.indeterminate = false\n                this.allSelected = true\n            } else {\n                this.indeterminate = true\n                this.allSelected = false\n            }\n        },\n    },\n}\n</script>\n"],"sourceRoot":"src/components"}]}