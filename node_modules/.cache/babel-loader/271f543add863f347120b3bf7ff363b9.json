{"remainingRequest":"/var/www/sharewani/front-end/node_modules/thread-loader/dist/cjs.js!/var/www/sharewani/front-end/node_modules/babel-loader/lib/index.js!/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/sharewani/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/sharewani/front-end/src/components/VideoJSRecord.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/sharewani/front-end/src/components/VideoJSRecord.vue","mtime":1570886746912},{"path":"/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/sharewani/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\nimport 'video.js/dist/video-js.css';\nimport 'videojs-record/dist/css/videojs.record.css';\nimport 'webrtc-adapter';\nimport RecordRTC from 'recordrtc';\nimport videojs from 'video.js'; // eslint-disable-next-line\n\nimport Record from 'videojs-record/dist/videojs.record.js';\nexport default {\n  data: function data() {\n    return {\n      player: '',\n      options: {\n        controls: true,\n        autoplay: false,\n        fluid: true,\n        loop: false,\n        width: 500,\n        height: 281,\n        debug: true,\n        controlBar: {\n          volumePanel: true\n        },\n        plugins: {\n          // configure videojs-record plugin\n          record: {\n            audio: false,\n            video: true,\n            debug: true,\n            maxLength: 10,\n            videoRecorderType: 'WhammyRecorder',\n            videoMimeType: 'video/mp4'\n          }\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    /* eslint-disable no-console */\n    this.player = videojs('#myVideo', this.options, function () {\n      // print version information at startup\n      var msg = 'Using video.js ' + videojs.VERSION + ' with videojs-record ' + videojs.getPluginVersion('record') + ' and recordrtc ' + RecordRTC.version;\n      videojs.log(msg);\n    });\n    this.player.record().getDevice(); // device is ready\n\n    this.player.on('deviceReady', function () {\n      console.log('device is ready!');\n    }); // user clicked the record button and started recording\n\n    this.player.on('startRecord', function () {\n      _this.$emit('recordingStarted');\n\n      console.log('recordingStarted');\n    });\n    this.player.on('stopRecord', function () {\n      _this.$emit('recordingStarted');\n\n      console.log('stop');\n    }); // user completed recording and stream is available\n\n    this.player.on('finishRecord', function () {\n      // the blob object contains the recorded data that\n      // can be downloaded by the user, stored on server etc.\n      console.log('finished recording: ', _this.player.recordedData);\n\n      _this.player.record().saveAs({\n        video: 'recorded-video.mp4'\n      });\n\n      _this.$emit('recordingEnded');\n    }); // error handling\n\n    this.player.on('error', function (element, error) {\n      console.warn(error);\n    });\n    this.player.on('deviceError', function () {\n      console.error('device error:', _this.player.deviceErrorCode);\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.player) {\n      this.player.dispose();\n    }\n  }\n};",{"version":3,"sources":["VideoJSRecord.vue"],"names":[],"mappings":";;;;AAKA,OAAA,4BAAA;AACA,OAAA,4CAAA;AAEA,OAAA,gBAAA;AACA,OAAA,SAAA,MAAA,WAAA;AAEA,OAAA,OAAA,MAAA,UAAA,C,CACA;;AACA,OAAA,MAAA,MAAA,uCAAA;AAEA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,EADA;AAEA,MAAA,OAAA,EAAA;AACA,QAAA,QAAA,EAAA,IADA;AAEA,QAAA,QAAA,EAAA,KAFA;AAGA,QAAA,KAAA,EAAA,IAHA;AAIA,QAAA,IAAA,EAAA,KAJA;AAKA,QAAA,KAAA,EAAA,GALA;AAMA,QAAA,MAAA,EAAA,GANA;AAOA,QAAA,KAAA,EAAA,IAPA;AAQA,QAAA,UAAA,EAAA;AACA,UAAA,WAAA,EAAA;AADA,SARA;AAWA,QAAA,OAAA,EAAA;AACA;AACA,UAAA,MAAA,EAAA;AACA,YAAA,KAAA,EAAA,KADA;AAEA,YAAA,KAAA,EAAA,IAFA;AAGA,YAAA,KAAA,EAAA,IAHA;AAIA,YAAA,SAAA,EAAA,EAJA;AAKA,YAAA,iBAAA,EAAA,gBALA;AAMA,YAAA,aAAA,EAAA;AANA;AAFA;AAXA;AAFA,KAAA;AA0BA,GA5BA;AA6BA,EAAA,OA7BA,qBA6BA;AAAA;;AACA;AACA,SAAA,MAAA,GAAA,OAAA,CAAA,UAAA,EAAA,KAAA,OAAA,EAAA,YAAA;AACA;AACA,UAAA,GAAA,GACA,oBACA,OAAA,CAAA,OADA,GAEA,uBAFA,GAGA,OAAA,CAAA,gBAAA,CAAA,QAAA,CAHA,GAIA,iBAJA,GAKA,SAAA,CAAA,OANA;AAOA,MAAA,OAAA,CAAA,GAAA,CAAA,GAAA;AACA,KAVA,CAAA;AAYA,SAAA,MAAA,CAAA,MAAA,GAAA,SAAA,GAdA,CAgBA;;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,YAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kBAAA;AACA,KAFA,EAjBA,CAqBA;;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,YAAA;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,kBAAA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kBAAA;AACA,KAHA;AAKA,SAAA,MAAA,CAAA,EAAA,CAAA,YAAA,EAAA,YAAA;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,kBAAA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,MAAA;AACA,KAHA,EA3BA,CAgCA;;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,cAAA,EAAA,YAAA;AACA;AACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,KAAA,CAAA,MAAA,CAAA,YAAA;;AACA,MAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,gBAAA;AACA,KANA,EAjCA,CAyCA;;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,OAAA,EAAA,UAAA,OAAA,EAAA,KAAA,EAAA;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,KAAA;AACA,KAFA;AAIA,SAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,YAAA;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,eAAA,EAAA,KAAA,CAAA,MAAA,CAAA,eAAA;AACA,KAFA;AAGA,GA9EA;AA+EA,EAAA,aA/EA,2BA+EA;AACA,QAAA,KAAA,MAAA,EAAA;AACA,WAAA,MAAA,CAAA,OAAA;AACA;AACA;AAnFA,CAAA","sourcesContent":["<template>\n    <video id=\"myVideo\" class=\"video-js vjs-default-skin\" playsinline></video>\n</template>\n\n<script>\nimport 'video.js/dist/video-js.css'\nimport 'videojs-record/dist/css/videojs.record.css'\n\nimport 'webrtc-adapter'\nimport RecordRTC from 'recordrtc'\n\nimport videojs from 'video.js'\n// eslint-disable-next-line\nimport Record from 'videojs-record/dist/videojs.record.js'\n\nexport default {\n    data() {\n        return {\n            player: '',\n            options: {\n                controls: true,\n                autoplay: false,\n                fluid: true,\n                loop: false,\n                width: 500,\n                height: 281,\n                debug: true,\n                controlBar: {\n                    volumePanel: true,\n                },\n                plugins: {\n                    // configure videojs-record plugin\n                    record: {\n                        audio: false,\n                        video: true,\n                        debug: true,\n                        maxLength: 10,\n                        videoRecorderType: 'WhammyRecorder',\n                        videoMimeType: 'video/mp4',\n                    },\n                },\n            },\n        }\n    },\n    mounted() {\n        /* eslint-disable no-console */\n        this.player = videojs('#myVideo', this.options, () => {\n            // print version information at startup\n            var msg =\n                'Using video.js ' +\n                videojs.VERSION +\n                ' with videojs-record ' +\n                videojs.getPluginVersion('record') +\n                ' and recordrtc ' +\n                RecordRTC.version\n            videojs.log(msg)\n        })\n\n        this.player.record().getDevice()\n\n        // device is ready\n        this.player.on('deviceReady', () => {\n            console.log('device is ready!')\n        })\n\n        // user clicked the record button and started recording\n        this.player.on('startRecord', () => {\n            this.$emit('recordingStarted')\n            console.log('recordingStarted')\n        })\n\n        this.player.on('stopRecord', () => {\n            this.$emit('recordingStarted')\n            console.log('stop')\n        })\n\n        // user completed recording and stream is available\n        this.player.on('finishRecord', () => {\n            // the blob object contains the recorded data that\n            // can be downloaded by the user, stored on server etc.\n            console.log('finished recording: ', this.player.recordedData)\n            this.player.record().saveAs({ video: 'recorded-video.mp4' })\n            this.$emit('recordingEnded')\n        })\n\n        // error handling\n        this.player.on('error', (element, error) => {\n            console.warn(error)\n        })\n\n        this.player.on('deviceError', () => {\n            console.error('device error:', this.player.deviceErrorCode)\n        })\n    },\n    beforeDestroy() {\n        if (this.player) {\n            this.player.dispose()\n        }\n    },\n}\n</script>\n"],"sourceRoot":"src/components"}]}